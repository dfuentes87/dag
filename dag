#!/bin/bash

# Domain At a Glance, aka dag
# Originally written by Randy Marcial and Nam-ho Kim (https://github.com/namh0)
# Forked and updated by David Fuentes (https://github.com/dfuentes87)
# Uses dig, whois, and curl to show a quick and pretty overview of a domain's information
# for the purpose of troubleshooting hosting issues

# Color Codes
GR='\033[32m'           #Green
RD='\033[31m'           #Red
YL='\033[33m'           #Yellow
# Highlights w/ Bold Text
BH='\033[48;5;24;1m'    #Blue
PH='\033[48;5;54;1m'    #Purple 
GH='\033[48;5;22;1m'    #Green 
# Bold
BD='\033[1m'
# No Color - use to clear
NC='\033[0m'

# Add domain and resolver
DOMAIN=$(echo -e "$1" | cut -d/ -f3)
RESOLV="$2"

# get whois before possible CNAME -> DOMAIN overwrite
dom_whois=$(whois "${DOMAIN}")

echo
# DNS Information
dns_info() {
  echo -e "${BH}------------------------- DNS Information -------------------------${NC}"
  echo
  if [[ -z ${RESOLV} ]]; then
    RESOLV=8.8.8.8
    echo -e "USING DEFAULT RESOLVER ${RESOLV} (Google)"
    echo
  else
    echo -e "${RD}USING RESOLVER ${RESOLV//@/}${NC}"
    echo
  fi

  # CNAME check
  CNAME=$(dig "${DOMAIN}" cname +short "${RESOLV}" | sed 's/.$//g')
  if [[ "$CNAME" ]]; then
    echo -e "${RD}CNAME detected for${NC} ${DOMAIN}${YL}"
    printf "%-10s --> %-15s" "${DOMAIN}" "${CNAME}"
    echo -e "${NC}\n${RD}This means the following DNS records (but not WhoIs info) will instead be for ${NC}${CNAME}"
    DOMAIN=$CNAME
    echo
  fi

  NS=$(dig "${DOMAIN}" ns "${RESOLV}" | awk '/NS/ {print substr($0, index($0,$5))}' | grep -v ';')
  A=$(dig "${DOMAIN}" a +short "${RESOLV}" | grep -vE "[a-z]|[A-Z]")
  AAAA=$(dig "${DOMAIN}" aaaa +short "${RESOLV}" | sed '/.*\.$/d')
  MX=$(dig "${DOMAIN}" mx "${RESOLV}" | awk '/MX/ {print $5" "$6}' | sed 's/\.$//g;/^[[:space:]]*$/d' | sort -h)
  TXT=$(dig "${DOMAIN}" txt "${RESOLV}" | grep -v 'CNAME\|^;' | grep "${DOMAIN}" | awk '/TXT/ {print substr($0, index($0,$5))}')
  CAA=$(dig "${DOMAIN}" caa +short "${RESOLV}")

  # Name Servers
  ns() {
    echo -e "${GR}Name Servers${NC}"
    if [[ -z ${NS} ]]; then
      echo -e "${RD}${DOMAIN} is not resolving to any Name Servers!${NC}\nNOTE: If you entered a subdomain, do dig on the parent domain for the NS records."
      echo
    else
      printf "%s\n" "${NS}" | sed 's/.$//g'
      echo
    fi
  }

  # A Records
  a_rcd() {
    echo -e "${GR}A Records${NC}"
    if [[ -z ${A} ]]; then
      echo -e "${RD}No A record found!${NC}"
      echo
    else
      for line in ${A}; do
        aorg=$(whois "${line}" | grep -Ew "OrgName:|org-name" | perl -ne 'print if $. <= 1' | cut -d ':' -f2 | sed -e 's/^[ \t]*//')
        printf "%-15s ( %-30s)" "${line}" "${aorg}" | awk '$1=$1'
      done
      echo
    fi
  }

  # PTR Records
  ptr() {
    echo -e "${GR}PTR Records${NC}"
    if [[ -z ${A} ]]; then
      echo -e "${RD}No PTR record found.${NC}"
      echo
    else
      for line in ${A}; do
        a_ptr=$(dig -x "${line}" +short)
        if [[ -z "${a_ptr}" ]]; then
          a_ptr="No PTR record"
        fi
        printf "%-15s -> %-30s" "${line}" "${a_ptr}" | awk '$1=$1' | sed 's/\.$//g'
      done
      echo
    fi
  }

  # AAAA Records
  aaaa() {
    echo -e "${GR}AAAA Records${NC}"
    if [[ -z ${AAAA} ]]; then
      echo -e "${RD}No AAAA records found.${NC}"
      echo
    else
      for line in ${AAAA}; do
        aaaaorg=$(whois "${line}" | grep -Ew "OrgName:|org-name" | perl -ne 'print if $. <= 1' | cut -d ':' -f2 | sed -e 's/^[ \t]*//')
        printf "%-15s ( %-30s)" "${line}" "${aaaaorg}" | awk '$1=$1'
      done
      echo
    fi
  }

  # MX Records
  mx() {
    echo -e "${GR}MX Records${NC}"
    if [[ -z "${MX}" ]] || [[ ! "${MX}" =~ [a-zA-Z] ]]; then
      echo -e "${RD}No MX records found.${NC}"
      echo
    else
      echo "${MX}" | while read -r line; do
        priority=$(echo "${line}" | awk '{print $1}')
        mx_host=$(echo "${line}" | awk '{print $2}')
        mxip=$(dig "${mx_host}" +short "${RESOLV}")
        echo "${mxip}" | while read -r ip; do
          mxip_org=$(whois "${ip}" | grep -Ew "OrgName:|org-name:" | perl -ne 'print if $. <= 1' | cut -d ':' -f2 | sed -e 's/^[ \t]*//')
          printf "Priority: %-30s | %-15s -> %-15s ( %-30s)" "${priority}" "${mx_host}" "${ip}" "${mxip_org}" | awk '$1=$1'
        done
      done
      echo
    fi
  }

  # TXT Records
  txt() {
    echo -e "${GR}TXT Records${NC}"
    if [[ -z ${TXT} ]]; then
      echo -e "${RD}No TXT records found.${NC}"
    else
      echo "${TXT}"
    fi
    echo
  }

  # CAA Records
  caa() {
    echo -e "${GR}CAA Records${NC}"
    if [[ -z ${CAA} ]]; then
      echo -e "${RD}No CAA records found.${NC}"
    else
      echo "${CAA}"
    fi
    echo
  }
  
  # run above functions
  ns
  a_rcd
  ptr
  aaaa
  mx
  txt
  caa
}

# WhoIs Information
# WhoIs is not uniform, so output may not be ideal
who_info() {
  echo -e "${GH}------------------------ WhoIs Information ------------------------${NC}"
  echo

  echo -e "This part of the script is not fully compatible with foreign and \nuncommon TLDs due to unstandardized WhoIs formats. If WhoIs data \nbelow is missing or poorly formatted, do a manual 'whois' lookup."
  echo

  # check to avoid poor outputs
  reg_chk=$(echo "${dom_whois}" | grep -i 'Domain Name:' | head -1 | awk -F':' '{print $2}')
  
  if [[ -z ${reg_chk} ]]; then
    echo -e "${RD}Could not obtain WhoIs information for ${NC}${DOMAIN}\n\nNOTE: Subdomains will not return WhoIs information.${NC}"
  else
    registrar=$(echo "${dom_whois}" | awk -F':' '/Registrar:/ {print substr($0, index($0,$2))}' | awk '{$1=$1};1' | uniq | head -1)
    reseller=$(echo "${dom_whois}" | awk '/Reseller:/ {print substr($0, index($0,$2))}' | sed '/^$/d' | grep -v 'Reseller:' | uniq)
    reg_name=$(echo "${dom_whois}" | awk -v GR=$GR -v NC=$NC '/Registrant Name:/ {print GR$1" "$2NC" " substr($0, index($0,$3))}')

    # registrar
    echo -e "${GR}Registrar:${NC} ${registrar}"
    # reseller
    if [[ -z "${reseller}" ]]; then
      echo -e "${GR}Reseller:${NC} n/a"
    else
      echo -e "${GR}Reseller:${NC} ${reseller}"
    fi
    echo
    # dates
    echo "${dom_whois}" | awk -v GR=$GR -v NC=$NC '/Creation Date/ || /Updated Date/ || /Created On/ {print GR$1" "$2NC" " substr($0, index($0,$3))}' | head -2
    expire=$(echo "${dom_whois}" | awk -v GR=$GR -v NC=$NC '/Registry Expiry Date/ {print GR$1" "$2" "$3NC" " substr($0, index($0,$4))}')
    if [[ -z "$expire" ]]; then
      echo "${dom_whois}" | awk -v GR=$GR -v NC=$NC '/Expiration Date/ {print GR$1" "$2NC" "$3}'
    else
      echo "$expire"
    fi
    echo
    # registrant name, org, email, and admin email
    if [[ -z "${reg_name}" ]]; then
      echo -e "${GR}Registrant Name:${NC} None Found!"
    else
      echo "${reg_name}"
    fi
    echo "${dom_whois}" | awk -v GR=$GR -v NC=$NC '/Registrant Organization/ || /Registrant Email/ || /Admin Name/ || /Admin Email/ {print GR$1" "$2NC" " substr($0, index($0,$3))}'
    echo
    # domain status, last update
    echo -e "${GR}Domain Status${NC}"
    # 2nd whois details is less accurate when it comes to the status, so remove it
    status=$(echo "${dom_whois}" | sed -n '/TERMS OF USE.*/q;p' | awk '/Domain Status/ {print $3}' | sort | uniq)
    if [[ -z "$status" ]]; then
      echo "Not Found!"
    else
      echo "$status"
    fi
    echo
    echo "${dom_whois}" | awk -v BD=$BD -v NC=$NC '/Last update/ {print BD$0NC}' | head -1
  fi
  echo
}

# HTTP Information
http_info() {
  echo -e "${PH}--------------------------- HTTP Status ---------------------------${NC}"
  echo

  # CNAME reminder
  if [[ "$CNAME" ]]; then
    echo -e "${RD}Due to the CNAME, curl will instead be for ${NC}${DOMAIN}${YL}"
    echo
    DOMAIN=$CNAME
  fi

  # basic status check
  STATUS=$(curl -sSI --insecure --connect-timeout 3 "${DOMAIN}" 2>&1 | grep HTTP)
  CODE=$(echo "${STATUS}" | awk '{print $2}')
  # initial HTTP/1.0 cURL check
  http_check=$(curl -sSIL --insecure --connect-timeout 3 "${DOMAIN}" | grep -i 'http/\|location' | grep -vi 'set-cookie:\|x-dc' | awk ' {print;} NR % 2 == 0 { print ""; }' | tr -d '\15\32' | sed '/HTTP.* 30[12]/s/$/ ---->/' | awk '!/^[Ll]ocation:/&&NR>1{print OFS}{printf "%s ",$0}END{print OFS}' | sed 's/[Ll]ocation: //g' | awk '/HTTP.* 30[12]/{s=3}/HTTP.* 200/{s=2}$0="\033[3"s"m"$0"\33[0m"')

  if [[ -z $STATUS ]]; then
    echo -e "${RD}Could not resolve host:${NC} ${DOMAIN}"
  elif [[ $CODE == 30* ]] || [[ $CODE == 200 ]]; then
    # HTTP/2 endpoint requires a different curl command
    if [[ -z $(echo "${http_check}" | grep -o 'HTTP/2 404') ]]; then
      echo "${http_check}"
    else
      curl -sSIL --http2 --request GET --connect-timeout 3 "${DOMAIN}" | grep -i 'http/\|location' | grep -vi 'set-cookie:\|x-dc' | awk ' {print;} NR % 2 == 0 { print ""; }' | tr -d '\15\32' | sed '/HTTP.* 30[12]/s/$/ ---->/' | awk '!/^[Ll]ocation:/&&NR>1{print OFS}{printf "%s ",$0}END{print OFS}' | sed 's/[Ll]ocation: //g' | awk '/HTTP.* 30[12]/{s=3}/HTTP.* 200/{s=2}$0="\033[3"s"m"$0"\33[0m"'
    fi
  else
    echo -e "${RD}$STATUS${NC}"
  fi
}

# Help/Output
if [[ -z ${1} ]]; then
  echo -e "You have to enter a domain for me to search. Try 'dag [domain]'\nStill need help? Use 'dag --help'"
elif [[ ${1} == "--help" ]]; then
  printf "
  Domain At a Glance, aka dag
  To use simply type: '"'dag [domain]'"' and dag will grab DNS, WhoIs, and HTTP status information.
  You can also specify a resolver: dag [domain] @[resolver]

  DNS Information:
  dag will dig the domain you entered and give you the NS, A, CNAME, MX, TXT, and CAA records of the
  domain you entered. For the A and MX records, dag will also tell you who owns the IP it's pointed
  to. NOTE: CNAME records are aliases to another record, which will make dag pull up DNS information
  of the domain the CNAME points to.
  
  WhoIs Information:
  Gets the registrar, reseller, important dates, and owner/admin name and email. WhoIs doesn't have
  a standardized format so you may get incomplete info, especially for foreign and rare TLDs.

  HTTP Status Information:
  Curls the domain and looks for the http response code. If it detects a redirect, it will follow
  it until the end."
  echo
else
  dns_info
  who_info
  http_info
  echo
fi
