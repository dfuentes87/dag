#!/bin/bash

# Domain At Glance, aka dag
# Use dig, whois, and curl to get a quick overview of a domain's information
# for the purpose of troubleshooting hosting issues with domains.

# Color Codes
GR='\033[32m'           #Green
RD='\033[31m'           #Red
BL='\033[34m'           #Blue
CY='\033[36m'           #Cyan
YL='\033[33m'           #Yellow
# Highlights w/ Bold Text
BH='\033[44;1m'         #Blue
PH='\033[48;5;54;1m'    #Purple 
GH='\033[48;5;22;1m'    #Green 
RH='\033[41;1m'         #Red
#No Color - use to clear
NC='\033[0m'

# Add domain and resolver
domain=$(echo "${1}") 
resolv=$(echo "${2}")

# DNS Information
# Get the record and check WhoIs of IP to check where domain is hosting.
dns_info() {
  echo -e "${BH}-------------------------DNS Information for ${domain}-------------------------${NC}"
  echo
  if [[ -z ${resolv} ]]; then
  resolv=8.8.8.8
  echo -e "${RD}USING RESOLVER ${resolv} (Google)${NC}"
  echo
else
  echo -e "${RD}USING RESOLVER $(echo ${resolv} | sed 's/@//g')${NC}"
  echo
fi

  CNAME=$(dig ${domain} +short | grep -E "[a-z]|[A-Z]")
  # get nameservers, even from subdomains, and avoids CNAME showing up again
  NS=$(dig ${domain} ns ${resolv} | awk '/NS/ {print substr($0, index($0,$5))}' | grep -v ';')
  A=$(dig ${domain} +short ${resolv})
  MX=$(dig ${domain} mx +short ${resolv} | awk '{print $2}')
  # get txt and prevent CNAME from showing up again
  TXT=$(dig ${domain} txt ${resolv} | grep -v 'CNAME\|^;' | grep ${domain} | awk '/TXT/ {print substr($0, index($0,$5))}')

  # Nameservers 
  ns() {
    echo -e "${GR}NS Records for ${domain}${NC}"
    # Check for NS, give error/warning if not found
    if [[ -z ${NS} ]]; then
      echo -e "${RD}${domain} is not resolving to any NameServers.\nIf you entered a subdomain, try dig on the parent domain for the NS records."
      echo
    else
      printf "%s\n" "${NS}"
      echo
    fi
  }
  ns

  # A|CNAME Records
  a_cname() {
    echo -e "${GR}A Records for ${domain}${NC}"
    if [[ -z ${CNAME} ]]; then
      if [[ -z ${A} ]]; then
        echo -e "${RD}${domain} isn't pointing to an A record.${NC}"
        echo
      else
      for line in ${A}
      do
        aorg=$(whois ${line} | grep -Ew "OrgName:|org-name" | perl -ne 'print if $. <= 1' | cut -d ':' -f2 | sed -e 's/^[ \t]*//')
        printf "%-30s | %-15s | %-30s" "${domain}" "${line}" "${aorg}" | awk '$1=$1'
        echo
      done
      fi
    else
      echo -e "${RD}${domain} isn't pointing to an A record.${NC}"
      echo
      echo -e "${GR}CNAME Record for ${domain}${NC}${YL}"
      #echo -e "${YL}"
      printf "%-30s | %-15s | %-30s" "${domain}" "CNAME" "${CNAME}"
      echo -e "${NC}"
      CIP=$(dig ${CNAME} +short)
      for line in ${CIP}
      do
        cwho=$(whois ${line} | grep -Ew "OrgName:|org-name" | perl -ne 'print if $. <= 1' | cut -d ':' -f2 | sed -e 's/^[ \t]*//') 
        printf "%-30s | %-15s | %-30s" "${CNAME}" "${CIP}" "${cwho}"
        echo
      done
      echo
    fi
  }
  a_cname

  # MX Records
  echo -e "${GR}MX Records for ${domain}${NC}"
  if [[ -z ${MX} ]]; then
    echo -e "${RD}No MX records found for ${domain}.${NC}"
    echo
  else 
    for line in ${MX}
    do
      mxip=$(dig ${line} +short ${resolv})
      echo -e "${RD}${line}${NC}"
      echo "${mxip}" | while read x; do printf "%-15s | %-30s" "$x" "`whois $x | grep -Ew "OrgName:|org-name:" | perl -ne 'print if $. <= 1' | cut -d ':' -f2 | sed -e 's/^[ \t]*//'`" | awk '$1=$1' && echo; done
    done
  fi

  # TXT Records
  txt() {
    echo -e "${GR}TXT Records for ${domain}${NC}"
    if [[ -z ${TXT} ]]; then
      echo -e "${RD}No TXT records found for ${domain}.${NC}"
      echo
    else
      printf "%s" "${TXT}"
      echo
      echo
    fi
    }
  txt
}

# WhoIs Information
# Get important details of domain most relevant for troubleshooting issues.
# WhoIs is not uniform, so output may not be ideal.
who_info() {
  echo -e "${GH}------------------------WhoIs Information for ${domain}------------------------${NC}"
  echo

  whois ${domain} > ~/.whowho.txt
  #Check if domain is registered
  CHK=$(grep -w 'Name Server' ~/.whowho.txt)
  
  if [[ -z ${CHK} ]]; then
    echo -e "${RD}Could not obtain WhoIs information for ${domain}.\n\nThis part of the script is generally not compatible with foreign and rare TLDs due to the unstandardized WhoIs formats.\nIf the domain you entered is valid, do a manual 'whois' lookup.\nPLEASE NOTE: Subdomains will not return WhoIs information.${NC}"
  else
    grep 'Registrar:' ~/.whowho.txt | head -1 | awk '$1=$1'
    grep 'Reseller:' ~/.whowho.txt | head -1 | awk '$1=$1'
    echo
    grep 'Creation Date' ~/.whowho.txt | head -1 | awk '$1=$1'
    grep 'Updated Date' ~/.whowho.txt | head -1 | awk '$1=$1'
    grep 'Registry Expiry' ~/.whowho.txt | head -1 | awk '$1=$1'
    echo
    if [[ -z $(grep 'Registrant Name:' ~/.whowho.txt) ]]; then
      echo "No Registrant Name found!"
    else
      grep 'Registrant Name:' ~/.whowho.txt
    fi
    grep 'Registrant Organization' ~/.whowho.txt
    grep 'Registrant Email' ~/.whowho.txt && echo
    grep 'Admin Name' ~/.whowho.txt
    grep 'Admin Email' ~/.whowho.txt
    echo
    grep 'Last update' ~/.whowho.txt | head -1
    echo
    echo -e "${CY}Domain Status${NC}"
    awk '/Domain Status/ {print $3}' ~/.whowho.txt | sort | uniq
  fi
  echo
  rm ~/.whowho.txt
}

# HTTP INFO
# curl for the http response code. If redirect is detected, check http response for redirected url
http_info() {
  echo -e "${PH}---------------------------HTTP Status for ${domain}---------------------------${NC}"
  echo
  STATUS=$(curl -sSI ${domain} 2>&1 | grep HTTP)
  CODE=$(echo $STATUS | awk '{print $2}')

  if [[ -z $STATUS ]]; then
    echo -e "${RD}Could not resolve host: ${domain}${NC}"
  elif [[ $CODE == 30* ]] || [[ $CODE == 200 ]]; then
    # first awk adds a newline between results, tr fixes line ends (don't know why I had to)
    # second awk brings together each result
    curl -sSIL ${domain} | grep -i 'http/\|location' | grep -vi 'set-cookie:' | awk ' {print;} NR % 2 == 0 { print ""; }' | tr -d '\15\32' | sed '/HTTP.* 30[12]/s/$/ ----->/' | awk '!/^[Ll]ocation:/&&NR>1{print OFS}{printf "%s ",$0}END{print OFS}' | sed 's/[Ll]ocation: //g' |
    # Add some color to each result: 301|302 Yellow and 200 Green
    awk '/HTTP.* 30[12]/{s=3}/HTTP.* 200/{s=2}$0="\033[3"s"m"$0"\33[0m"'
  else
    echo -e "${RD}$STATUS${NC}"
  fi
}

# Output everything
if [[ -z ${1} ]]; then
  echo -e "You have to enter a domain for me to search. Try dag [domain]\nStill need help? Try dag --help." 
elif [[ ${1} == "--help" ]]; then
  printf "
  Domain At Glance, aka dag. Originally written by Nam-ho Kim, forked and updated by David Fuentes.
  To use, simply type: '"'dag [domain]'"' and dag will grab DNS, WhoIs, and HTTP status information.
  You can also specify a resolver: dag [domain] @[resolver]

  DNS Information:
  dag will dig the domain you entered and give you the NS, A, MX, CNAME, and TXT records of the domain you entered.
  For the A and MX records, dag will also tell you who owns the IP it's pointed to. Usually, this will show what company is hosting.
  If the domain or subdomain you entered has a CNAME record, it will highlight CNAMEs in yellow.
  CNAME will redirect DNS and this will make dag pull up DNS information of the domain the CNAME points to.
  
  WhoIs Information
  Gets the registrar, reseller, important dates, and owner/admin name and email. WhoIs doesn't have a standardized format so
  you may get incomplete info, especially for foreign and rare TLDs.

  HTTP Status Info
  dag curls the domain and looks for the http response code. If it detects a redirect, it will follow it until the end."
  echo
else
 dns_info
 who_info
 http_info
 echo
fi
